# Config file for ReBench http://rebench.googlecode.com/
# Config format is YAML (see http://yaml.org/ for detailed spec)

# this run definition will be choosen if no parameters are given to rebench.py
standard_run: Barriers
standard_dataFile: 'barriers.data'

# settings and requirements for statistic evaluation
statistics:
    min_runs: 100
    max_runs: 200
    confidence_level: 0.95     #all measurments lie with a probability of 95% in the convidence interval 
    error_margin: 0.005        #the size of the confidence interfal should not be larger the 0.5% of the mean value
 
# settings for quick runs, useful for fast feedback during experiments
quick_runs:
    min_runs: 3
    max_runs: 10
    max_time: 60   # time in seconds

# definition of benchmark suites
benchmark_suites:
    BarriersEPCC:
        performance_reader: EPCCPerformance
        location: /users/smarr/Projects/barriers/rebench/
        command: ' epcc/%(cores)s/%(benchmark)s.epcc'
        input_sizes: [1] # that is the number of cores
        cores: [1, 10, 12, 14, 16, 18, 2, 20, 22, 24, 26, 28, 3, 30, 32, 34, 36, 38, 4, 40, 42, 44, 46, 48, 5, 50, 52, 54, 56, 58, 59, 6, 8] 
        benchmarks:
            - ConstSpinningDisseminationBarrier
            - DummyBarrier
            - ConstSyncTreeBarrier
            - HabaneroPhaser
            - PthreadBarrier
            - SpinningCentralBarrier
            - SpinningCentralDBarrier
            - SpinningDisseminationBarrier
            - TmcSpinBarrier
            - SyncTreePhaser
            - TmcTokenBarrier
            - SyncTreePhaser.full
        ulimit: 300
    BarriersEPCCSimple:
        performance_reader: EPCCPerformance
        location: /users/smarr/Projects/barriers/rebench/
        command: ' epcc/%(cores)s/%(benchmark)s.epcc-simple'
        input_sizes: [1] # that is the number of cores
        cores: [1, 10, 12, 14, 16, 18, 2, 20, 22, 24, 26, 28, 3, 30, 32, 34, 36, 38, 4, 40, 42, 44, 46, 48, 5, 50, 52, 54, 56, 58, 59, 6, 8]
        benchmarks:
            - ConstSpinningDisseminationBarrier
            - ConstSyncTreeBarrier
            - DummyBarrier
            - HabaneroPhaser
            - PthreadBarrier
            - SpinningCentralBarrier
            - SpinningCentralDBarrier
            - SpinningDisseminationBarrier
            - TmcSpinBarrier
            - SyncTreePhaser
            - TmcTokenBarrier
            - SyncTreePhaser.full
        ulimit: 300
    BarriersEPCCLioh:
        performance_reader: EPCCPerformance
        location: /users/smarr/Projects/barriers/rebench/
        command: ' epcc/%(cores)s/%(benchmark)s.lioh'
        input_sizes: [1] # that is the number of cores
        cores: [1, 10, 12, 14, 16, 18, 2, 20, 22, 24, 26, 28, 3, 30, 32, 34, 36, 38, 4, 40, 42, 44, 46, 48, 5, 50, 52, 54, 56, 58, 59, 6, 8]
        benchmarks:
            - ConstSpinningDisseminationBarrier
            - ConstSyncTreeBarrier
            - DummyBarrier
            - HabaneroPhaser
            - PthreadBarrier
            - SpinningCentralBarrier
            - SpinningCentralDBarrier
            - SpinningDisseminationBarrier
            - TmcSpinBarrier
            - SyncTreePhaser
            - TmcTokenBarrier
            - SyncTreePhaser.full
        ulimit: 300
    BarriersEPCCAbsoh:
        performance_reader: EPCCPerformance
        location: /users/smarr/Projects/barriers/rebench/
        command: ' epcc/%(cores)s/%(benchmark)s.absoh'
        input_sizes: [1] # that is the number of cores
        cores: [1, 10, 12, 14, 16, 18, 2, 20, 22, 24, 26, 28, 3, 30, 32, 34, 36, 38, 4, 40, 42, 44, 46, 48, 5, 50, 52, 54, 56, 58, 59, 6, 8]
        benchmarks:
            - ConstSpinningDisseminationBarrier
            - ConstSyncTreeBarrier
            - DummyBarrier
            - HabaneroPhaser
            - PthreadBarrier
            - SpinningCentralBarrier
            - SpinningCentralDBarrier
            - SpinningDisseminationBarrier
            - TmcSpinBarrier
            - SyncTreePhaser
            - TmcTokenBarrier
            - SyncTreePhaser.full
        ulimit: 300
    BarriersSplashBarnes:
        performance_reader: EPCCPerformance
        location: /users/smarr/Projects/barriers/rebench/
        command: ' splash/%(cores)s/%(benchmark)s.BARNES splash/%(cores)s/input.barnes'
        input_sizes: [1]
        cores: [4, 8, 16, 32, 48, 58]
        benchmarks:
            - ConstSpinningDisseminationBarrier
            - ConstSyncTreeBarrier
            - HabaneroPhaser
            - PthreadBarrier
            - SpinningCentralBarrier
            - SpinningCentralDBarrier
            - SpinningDisseminationBarrier
            - TmcSpinBarrier
            - SyncTreePhaser
            - TmcTokenBarrier
        ulimit: 300
    BarriersSplashCholesky:
        performance_reader: EPCCPerformance
        location: /users/smarr/Projects/barriers/rebench/
        command: ' splash/%(cores)s/%(benchmark)s.CHOLESKY splash/input.cholesky'
        input_sizes: [1]
        cores: [4, 8, 16, 32, 48, 58]
        benchmarks:
            - ConstSpinningDisseminationBarrier
            - ConstSyncTreeBarrier
            - HabaneroPhaser
            - PthreadBarrier
            - SpinningCentralBarrier
            - SpinningCentralDBarrier
            - SpinningDisseminationBarrier
            - TmcSpinBarrier
            - SyncTreePhaser
            - TmcTokenBarrier
        ulimit: 300
    BarriersSplashFFT:
        performance_reader: EPCCPerformance
        location: /users/smarr/Projects/barriers/rebench/
        command: ' splash/%(cores)s/%(benchmark)s.FFT -p%(cores)s'
        input_sizes: [1]
        cores: [4, 8, 16, 32] # needs to be power of 2
        benchmarks:
            - ConstSpinningDisseminationBarrier
            - ConstSyncTreeBarrier
            - HabaneroPhaser
            - PthreadBarrier
            - SpinningCentralBarrier
            - SpinningCentralDBarrier
            - SpinningDisseminationBarrier
            - TmcSpinBarrier
            - SyncTreePhaser
            - TmcTokenBarrier
        ulimit: 300
    BarriersSplashOcean:
        performance_reader: EPCCPerformance
        location: /users/smarr/Projects/barriers/rebench/
        command: ' splash/%(cores)s/%(benchmark)s.OCEAN -p%(cores)s'
        input_sizes: [1]
        cores: [4, 8, 16, 32] #needs to be power of 2
        benchmarks:
            - ConstSpinningDisseminationBarrier
            - ConstSyncTreeBarrier
            - HabaneroPhaser
            - PthreadBarrier
            - SpinningCentralBarrier
            - SpinningCentralDBarrier
            - SpinningDisseminationBarrier
            - TmcSpinBarrier
            - SyncTreePhaser
            - TmcTokenBarrier
        ulimit: 300
    BarriersSplashRadiosity:
        performance_reader: EPCCPerformance
        location: /users/smarr/Projects/barriers/rebench/
        command: ' splash/%(cores)s/%(benchmark)s.RADIOSITY'
        input_sizes: [1]
        cores: [4, 8, 16, 32, 48, 58]
        benchmarks:
            - ConstSpinningDisseminationBarrier
            - ConstSyncTreeBarrier
            - HabaneroPhaser
            - PthreadBarrier
            - SpinningCentralBarrier
            - SpinningCentralDBarrier
            - SpinningDisseminationBarrier
            - TmcSpinBarrier
            - SyncTreePhaser
            - TmcTokenBarrier
        ulimit: 300
    BarriersSplashRadix:
        performance_reader: EPCCPerformance
        location: /users/smarr/Projects/barriers/rebench/
        command: ' splash/%(cores)s/%(benchmark)s.RADIX -p%(cores)s'
        input_sizes: [1]
        cores: [4, 8, 16, 32]
        benchmarks:
            - ConstSpinningDisseminationBarrier
            - ConstSyncTreeBarrier
            - HabaneroPhaser
            - PthreadBarrier
            - SpinningCentralBarrier
            - SpinningCentralDBarrier
            - SpinningDisseminationBarrier
            - TmcSpinBarrier
            - SyncTreePhaser
            - TmcTokenBarrier
        ulimit: 300
    BarriersSplashLU:
        performance_reader: EPCCPerformance
        location: /users/smarr/Projects/barriers/rebench/
        command: ' splash/%(cores)s/%(benchmark)s.LU -p%(cores)s'
        input_sizes: [1]
        cores: [4, 8, 16, 32, 48, 58]
        benchmarks:
            - ConstSpinningDisseminationBarrier
            - ConstSyncTreeBarrier
            - HabaneroPhaser
            - PthreadBarrier
            - SpinningCentralBarrier
            - SpinningCentralDBarrier
            - SpinningDisseminationBarrier
            - TmcSpinBarrier
            - SyncTreePhaser
            - TmcTokenBarrier
    BarriersSplashWATER:
        performance_reader: EPCCPerformance
        location: /users/smarr/Projects/barriers/rebench/
        command: ' splash/%(cores)s/%(benchmark)s.WATER-SPATIAL'
        input_sizes: [1]
        cores: [4, 8, 16, 32, 48, 58]
        benchmarks:
            - ConstSpinningDisseminationBarrier
            - ConstSyncTreeBarrier
            - HabaneroPhaser
            - PthreadBarrier
            - SpinningCentralBarrier
            - SpinningCentralDBarrier
            - SpinningDisseminationBarrier
            - TmcSpinBarrier
            - SyncTreePhaser
            - TmcTokenBarrier
        ulimit: 300
    BarriersDynamic:
        performance_reader: EPCCPerformance
        location: /users/smarr/Projects/barriers/rebench/
        command: ' dynamic/%(cores)s/%(benchmark)s.dynamic'
        input_sizes: [1] # that is the number of cores
        cores: [1, 2, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 59]
        benchmarks:
            - HabaneroPhaser
            - SpinningCentralDBarrier
            - SyncTreePhaser
        ulimit: 300
        
# VMs have a name and are specified by a path and the binary to be executed
virtual_machines:
    tile-here:
        path: /users/smarr/Projects/barriers
        binary: tile-here
        cores: [4, 8, 16, 32]

# define the benchmarks to be executed for a re-executable benchmark run
run_definitions:
    Barriers:
        description: >
            This run definition is used to compare all barrier implementations on the Tilera and maybe Intel system
        actions: benchmark
        benchmark: 
            - BarriersSplashWATER
            - BarriersEPCC
            - BarriersEPCCSimple
            - BarriersEPCCLioh
            - BarriersEPCCAbsoh
            - BarriersDynamic
            - BarriersSplashBarnes
            - BarriersSplashCholesky
            - BarriersSplashFFT
            - BarriersSplashOcean
            - BarriersSplashRadiosity
            - BarriersSplashRadix
            - BarriersSplashLU
        executions:
            - tile-here
        #TODO needs to be adapted
        visualization:
            fileName: '%s_%s.pdf'       # fileName needs placeholders for the dimentions specified by separateBy
            separateBy: [suite, cores] # generates different diagrams per 'cores' value
            #groupBy: variable_values
            sortBy: {stats : median}  # median is used for sorting, since the mean would emphasize outliers much more
            criterion: total # use only the total cirterion for the diagrams
            columnName: '{0}' # is determined from the BenchmarkConfig object ATM
            title: 'Test Plot: Just Testing'
            labelXAxis: ''
            labelYAxis: ''

           
